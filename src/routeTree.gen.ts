/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifyEmailRouteImport } from './routes/verify-email'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CreateOrganizationRouteImport } from './routes/create-organization'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OfficeIndexRouteImport } from './routes/office/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppMembersRouteImport } from './routes/app/members'

const VerifyEmailRoute = VerifyEmailRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateOrganizationRoute = CreateOrganizationRouteImport.update({
  id: '/create-organization',
  path: '/create-organization',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OfficeIndexRoute = OfficeIndexRouteImport.update({
  id: '/office/',
  path: '/office/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppMembersRoute = AppMembersRouteImport.update({
  id: '/app/members',
  path: '/app/members',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create-organization': typeof CreateOrganizationRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-email': typeof VerifyEmailRoute
  '/app/members': typeof AppMembersRoute
  '/app': typeof AppIndexRoute
  '/office': typeof OfficeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-organization': typeof CreateOrganizationRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-email': typeof VerifyEmailRoute
  '/app/members': typeof AppMembersRoute
  '/app': typeof AppIndexRoute
  '/office': typeof OfficeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create-organization': typeof CreateOrganizationRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-email': typeof VerifyEmailRoute
  '/app/members': typeof AppMembersRoute
  '/app/': typeof AppIndexRoute
  '/office/': typeof OfficeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create-organization'
    | '/login'
    | '/signup'
    | '/verify-email'
    | '/app/members'
    | '/app'
    | '/office'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create-organization'
    | '/login'
    | '/signup'
    | '/verify-email'
    | '/app/members'
    | '/app'
    | '/office'
  id:
    | '__root__'
    | '/'
    | '/create-organization'
    | '/login'
    | '/signup'
    | '/verify-email'
    | '/app/members'
    | '/app/'
    | '/office/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateOrganizationRoute: typeof CreateOrganizationRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  VerifyEmailRoute: typeof VerifyEmailRoute
  AppMembersRoute: typeof AppMembersRoute
  AppIndexRoute: typeof AppIndexRoute
  OfficeIndexRoute: typeof OfficeIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verify-email': {
      id: '/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof VerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create-organization': {
      id: '/create-organization'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/office/': {
      id: '/office/'
      path: '/office'
      fullPath: '/office'
      preLoaderRoute: typeof OfficeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/members': {
      id: '/app/members'
      path: '/app/members'
      fullPath: '/app/members'
      preLoaderRoute: typeof AppMembersRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateOrganizationRoute: CreateOrganizationRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  VerifyEmailRoute: VerifyEmailRoute,
  AppMembersRoute: AppMembersRoute,
  AppIndexRoute: AppIndexRoute,
  OfficeIndexRoute: OfficeIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
